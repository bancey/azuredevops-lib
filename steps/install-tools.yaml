---
parameters:
  - name: tools
    type: object
    default: []
  - name: cacheKeyPrefix
    type: string
    default: "tools"

steps:
  # Cache tools directory
  - task: Cache@2
    displayName: Cache Tools
    inputs:
      key: >-
        ${{ parameters.cacheKeyPrefix }} |
        "$(Agent.OS)" | tools
      restoreKeys: |
        ${{ parameters.cacheKeyPrefix }} | "$(Agent.OS)"
        ${{ parameters.cacheKeyPrefix }}
      path: $(Pipeline.Workspace)/.tools
      cacheHitVar: TOOLS_CACHE_RESTORED

  # Setup tools directory
  - script: |
      set -e
      mkdir -p $(Pipeline.Workspace)/.tools/bin
      cd $(Pipeline.Workspace)/.tools
      echo "##vso[task.prependpath]$(Pipeline.Workspace)/.tools/bin"
    displayName: Setup Tools Directory

  # Install each tool as a separate step
  - ${{ each tool in parameters.tools }}:
    - script: |
        set -e
        cd $(Pipeline.Workspace)/.tools

        if [ "$(TOOLS_CACHE_RESTORED)" != "true" ]; then
          echo "Installing $(TOOL_NAME)..."

          if [ -n "$(APT_PACKAGE)" ]; then
            # Install via apt
            sudo apt update && sudo apt install -y $(APT_PACKAGE)
          elif [ -n "$(DOWNLOAD_URL)" ]; then
            if [ -n "$(INSTALL_SCRIPT)" ]; then
              # Use custom install script
              curl -fL $(DOWNLOAD_URL) | $(INSTALL_SCRIPT)
            elif [ "$(DIRECT_BINARY)" = "true" ]; then
              # Download direct binary
              curl -fL -o bin/$(TOOL_NAME) $(DOWNLOAD_URL)
              chmod +x bin/$(TOOL_NAME)
            else
              # Download and extract
              curl -fL -o $(TOOL_NAME).tar.gz $(DOWNLOAD_URL)
              tar -xzf $(TOOL_NAME).tar.gz

              # Find the binary and move it
              find . -name "$(TOOL_NAME)" -type f -executable | \
                head -1 | xargs -I {} mv {} bin/

              # Clean up
              rm -f $(TOOL_NAME).tar.gz
            fi
          fi

          echo "$(TOOL_NAME) installation completed"
        else
          echo "$(TOOL_NAME) restored from cache"
        fi

        # Run post-install commands if they exist
        if [ -n "$(POST_INSTALL_COMMANDS)" ]; then
          echo "Configuring $(TOOL_NAME)..."
          echo "$(POST_INSTALL_COMMANDS)" | while IFS= read -r command; do
            if [ -n "$command" ]; then
              eval "$command"
            fi
          done
        fi
      displayName: Install and Configure ${{ tool.name }}
      condition: ne(variables['Agent.JobStatus'], 'Failed')
      env:
        TOOL_NAME: ${{ tool.name }}
        APT_PACKAGE: ${{ coalesce(tool.aptPackage, '') }}
        DOWNLOAD_URL: ${{ coalesce(tool.downloadUrl, '') }}
        INSTALL_SCRIPT: ${{ coalesce(tool.installScript, '') }}
        DIRECT_BINARY: ${{ coalesce(tool.directBinary, 'false') }}
        POST_INSTALL_COMMANDS: ${{ join('\n', coalesce(tool.postInstallCommands, '')) }}
