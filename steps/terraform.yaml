parameters:
  - name: backendResourceGroupName
    type: string
    default: tfstate-rg
  - name: backendResourceGroupLocation
    type: string
    default: uksouth
  - name: backendStorageAccountSku
    type: string
    default: Standard_LRS
  - name: backendContainer
    type: string
    default: tfstate
  - name: backendStorageAccount
    type: string
  - name: workingDirectory
    type: string
  - name: azureRmKey
    type: string
  - name: serviceConnection
    type: string
  - name: variableFilePath
    type: string
  - name: env
    type: object
    default: {}
  - name: extraCommandArgs
    type: string
    default: ""
  - name: parallelism
    type: number
    default: -1
  - name: runApply
    type: boolean
  - name: runDestroy
    type: boolean

steps:
  - script: |
      curl -L https://raw.githubusercontent.com/warrensbox/terraform-switcher/release/install.sh | bash -s -- -b  ~/.local/bin
      set -x
      echo '##vso[task.prependpath]$(HOME)/.local/bin'
      export PATH=$HOME/.local/bin:$PATH
      tfswitch -b ~/.local/bin/terraform
    displayName: Install tfswitch
    workingDirectory: ${{ parameters.workingDirectory }}
  - task: TerraformCLI@0
    displayName: Terraform initialize
    inputs:
      command: init
      workingDirectory: ${{ parameters.workingDirectory }}
      commandOptions: '-upgrade -reconfigure'
      backendType: azurerm
      ensurebackend: true
      backendServiceArm: ${{ parameters.serviceConnection }}
      backendAzureRmResourceGroupName: ${{ parameters.backendResourceGroupName }}
      backendAzureRmResourceGroupLocation: ${{ parameters.backendResourceGroupLocation }}
      backendAzureRmStorageAccountName: ${{ parameters.storageAccount }}
      backendAzureRmStorageAccountSku: ${{ paramters.backendStorageAccountSku }}
      backendAzureRmContainerName: ${{ parameters.backendContainer }}
      backendAzureRmKey: ${{ parameters.azureRmKey }}
  - task: TerraformCLI@0
    displayName: Terraform validate
    inputs:
      command: validate
      workingDirectory: ${{ parameters.workingDirectory }}
  - task: TerraformCLI@0
    displayName: Terraform plan
    inputs:
      command: plan
      allowTelemetryCollection: true
      workingDirectory: ${{ parameters.workingDirectory }}
      environmentServiceName: ${{ parameters.serviceConnection }}
      publishPlanResults: $(System.StageDisplayName)
      ${{ if ne(parameters.extraCommandArgs, '') }}:
        commandOptions: '-var-file ${{ parameters.variableFilePath }} -compact-warnings -out=$(System.StageName).tfplan ${{ parameters.extraCommandArgs }}'
      ${{ else }}:
        commandOptions: '-var-file ${{ parameters.variableFilePath }} -compact-warnings -out=$(System.StageName).tfplan'
    env: ${{ parameters.env }}
  - ${{ if eq(parameters.runApply, true) }}:
    - task: TerraformCLI@0
      displayName: Terraform apply
      inputs:
        command: apply
        ${{ if ne(parameters.parallelism, -1) }}:
          commandOptions: '-parallelism=${{ parameters.parallelism }} -compact-warnings $(System.StageName).tfplan'
        ${{ else }}:
          commandOptions: '-compact-warnings $(System.StageName).tfplan'
        workingDirectory: ${{ parameters.workingDirectory }}
        environmentServiceName: ${{ parameters.serviceConnection }}
      env: ${{ parameters.env }}
  - ${{ if eq(parameters.runDestroy, true) }}:
    - task: TerraformCLI@0
      displayName: Terraform destroy
      inputs:
        command: destroy
        ${{ if ne(parameters.parallelism, -1) }}:
          commandOptions: -parallelism=${{ parameters.parallelism }} -var-file ${{ parameters.variableFilePath }}
        ${{ else }}:
          commandOptions: -var-file ${{ parameters.variableFilePath }}
        workingDirectory: ${{ parameters.workingDirectory }}
        environmentServiceName: ${{ parameters.serviceConnection }}
      env: ${{ parameters.env }}
