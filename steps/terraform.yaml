parameters:
  - name: backendResourceGroupName
    type: string
    default: tfstate-rg
  - name: backendResourceGroupLocation
    type: string
    default: uksouth
  - name: backendStorageAccountSku
    type: string
    default: Standard_LRS
  - name: backendContainer
    type: string
    default: tfstate
  - name: backendStorageAccount
    type: string
  - name: workingDirectory
    type: string
  - name: azureRmKey
    type: string
  - name: serviceConnection
    type: string
  - name: variableFilePath
    type: string
  - name: env
    type: object
    default: {}
  - name: extraCommandArgs
    type: string
    default: ""
  - name: parallelism
    type: number
    default: -1
  - name: runApply
    type: boolean
  - name: runDestroy
    type: boolean
  - name: publishPlan
    type: boolean
    default: true

steps:
  - template: gh-auth.yaml
    parameters:
      serviceConnection: ${{ parameters.serviceConnection }}
      keyVaultName: bancey-vault
      privateKeySecretName: GitHub-Bot-Private-Key
      githubAppIdSecretName: GitHub-Bot-ID
      githubInstallationIdSecretName: GitHub-Bot-Installation-ID
      condition: and(succeeded(), ne(variables['System.PullRequest.PullRequestNumber'], ''))
  - ${{ if eq(parameters.publishPlan, true) }}:
      - template: install-tools.yaml
        parameters:
          cacheKeyPrefix: "terraform-tools"
          

  - template: install-tools.yaml
    parameters:
      cacheKeyPrefix: "terraform-tools"
      tools:
        - name: terraform-switcher
          downloadUrl: https://raw.githubusercontent.com/warrensbox/terraform-switcher/release/install.sh
          installScript: bash -s -- -b $(Pipeline.Workspace)/.tools/bin
        - name: tfcmt
          downloadUrl: https://github.com/suzuki-shunsuke/tfcmt/releases/download/v4.14.12/tfcmt_linux_amd64.tar.gz
  - task: TerraformCLI@2
    displayName: Terraform initialize
    inputs:
      command: init
      workingDirectory: ${{ parameters.workingDirectory }}
      commandOptions: "-upgrade -reconfigure"
      backendType: azurerm
      backendServiceArm: ${{ parameters.serviceConnection }}
      backendAzureRmResourceGroupName: ${{ parameters.backendResourceGroupName }}
      backendAzureRmResourceGroupLocation: ${{ parameters.backendResourceGroupLocation }}
      backendAzureRmStorageAccountName: ${{ parameters.backendStorageAccount }}
      backendAzureRmStorageAccountSku: ${{ parameters.backendStorageAccountSku }}
      backendAzureRmContainerName: ${{ parameters.backendContainer }}
      backendAzureRmKey: ${{ parameters.azureRmKey }}
  - task: TerraformCLI@2
    displayName: Terraform validate
    inputs:
      command: validate
      workingDirectory: ${{ parameters.workingDirectory }}
  - task: TerraformCLI@2
    displayName: Terraform plan
    inputs:
      command: plan
      allowTelemetryCollection: true
      workingDirectory: ${{ parameters.workingDirectory }}
      environmentServiceName: ${{ parameters.serviceConnection }}
      publishPlanResults: $(System.StageDisplayName)
      ${{ if ne(parameters.extraCommandArgs, '') }}:
        commandOptions: "-var-file ${{ parameters.variableFilePath }} -lock=false -compact-warnings -out=$(System.StageName).tfplan ${{ parameters.extraCommandArgs }}"
      ${{ else }}:
        commandOptions: "-var-file ${{ parameters.variableFilePath }} -lock=false -compact-warnings -out=$(System.StageName).tfplan"
    env: ${{ parameters.env }}
  - ${{ if eq(parameters.runApply, true) }}:
      - task: TerraformCLI@2
        displayName: Terraform apply
        inputs:
          command: apply
          ${{ if ne(parameters.parallelism, -1) }}:
            commandOptions: "-parallelism=${{ parameters.parallelism }} -compact-warnings $(System.StageName).tfplan"
          ${{ else }}:
            commandOptions: "-compact-warnings $(System.StageName).tfplan"
          workingDirectory: ${{ parameters.workingDirectory }}
          environmentServiceName: ${{ parameters.serviceConnection }}
        env: ${{ parameters.env }}
  - ${{ if eq(parameters.runDestroy, true) }}:
      - task: TerraformCLI@2
        displayName: Terraform destroy
        inputs:
          command: destroy
          ${{ if ne(parameters.parallelism, -1) }}:
            commandOptions: -parallelism=${{ parameters.parallelism }} -var-file ${{ parameters.variableFilePath }}
          ${{ else }}:
            commandOptions: -var-file ${{ parameters.variableFilePath }}
          workingDirectory: ${{ parameters.workingDirectory }}
          environmentServiceName: ${{ parameters.serviceConnection }}
        env: ${{ parameters.env }}
  - ${{ if eq(parameters.publishPlan, true) }}:
      - script: |
          OWNER=$(echo $(Build.Repository.Name) | cut -d '/' -f1)
          REPOSITORY_NAME=$(echo $(Build.Repository.Name) | cut -d '/' -f2)
          tfcmt --owner $OWNER --repo $REPOSITORY_NAME --pr $(System.PullRequest.PullRequestNumber) --var target:$(System.StageName) plan -patch -- terraform show $(System.StageName).tfplan
        displayName: Publish Terraform plan to GitHub
        condition: and(succeeded(), ne(variables['System.PullRequest.PullRequestNumber'], ''))
        workingDirectory: ${{ parameters.workingDirectory }}
        env:
          GITHUB_TOKEN: $(GitHubToken)
